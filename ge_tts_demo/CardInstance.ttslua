local Instance = require('ge_tts/Instance')
local TableUtils = require('ge_tts/TableUtils')

--
-- Here we declare a Luanalysis sub class of ge_tts/Instance, in the type system it is known as
-- ge_tts__Instance, our subclass is called CardInstance.
--
-- NOTE: You *don't* need to use type definitions in your own project if you don't want to. Lua
--       does not at all require this. It just helps as document and formalize our code.
--
-- In ge_tts, an Instance represents the concept of a game piece, it's persistent unlike TTS
-- objects, which are destroyed when placed in a bag or deck. Instead, ge_tts instances continue to
-- exist, and you can even call its methods like instance.destroy() whilst it's in a container. In
-- which case ge_tts will remove it from the container (and you should discard your reference to the
-- instance).
--

---@class CardInstance : ge_tts__Instance

--
-- Everything in TTS should be able to be saved and loaded such that saved games and rewind work.
-- Here we declare a Luanalysis type called CardInstance_SavedState, which inherits from ge_tts'
-- ge_tts__Instance_SavedState. We add any game specific data associated with the instance, in this
-- case it's the underlying card data from our card library.
--

---@shape CardInstance_SavedState : ge_tts__Instance_SavedState
---@field card Card

--
-- In Lua, each file should return something. When you require a file, you gain access to whatever
-- was returned. What we're going to do now is declare Luanalysis type information for what this
-- file returns, a Lua table.
--
-- Within this file the table is stored in a local variable called CardInstance, however Luanalysis
-- types are globally accessible across every file in your project, so we must ensure our types are
-- given unique meaningful names. In this case, the name we've chosen is static_CardInstance. It's
-- "static_" because what we return from this file is not a CardInstance, but rather the constructor
-- that you can call in order to create a CardInstance.
--
-- static_CardInstance inherits from ge_tts__static_Instance, for convenience purposes. It's done
-- so that any static fields/methods that belong to Instance are also accessible on CardInstance.
--
-- Although static_CardInstance is a table, it's a *callable* table i.e. our constructor for
-- creating CardInstance. So in Luanalysis speak we define "overloads" on the class, which indicates
-- that this table can be called like a function. We've actually got three overloads as follows:
--
-- 1. Accepts a card (from our card library), as well as a a TTS object (presumably a TTS card).
--
-- 2. Accepts a card, an *instance GUID*, and a TTS *container* object. You'd use this constructor
--    if your card is being created but is already within a deck. In which case the GUID is the
--    instance GUID (the GUID of the card object in the deck), and the container is the deck itself.
--
-- 3. Accepts a saved state.
--    ge_tts instances know how to restore themselves from a saved state that they created. You use
--    this constructor when your mod is loaded from a saved game. ge_tts will automatically recover
--    a reference to the TTS object within the scene. In fact, when used correctly, ge_tts will even
--    automatically recover objects that *should* exist in a save, but don't, due to a save
--    occurring right when the objects were in the middle of spawning. An edge case to be sure, but
--    ge_tts handles it.
--
--    Anyway, you call this constructor when restoring from a saved state (onLoad). To *obtain* this
--    saved (in response to an onSave) you simply call instance.save(), and it'll return a saved
--    state that you must persist yourself in onSave(). ge_tts/Main.ttslua does this already.
--
-- All three overloads return a CardInstance i.e. they construct a CardInstance.
--

---@class static_CardInstance : ge_tts__static_Instance
---@overload fun(card: Card, object: tts__Object): CardInstance
---@overload fun(card: Card, guid: string, container: tts__Container): CardInstance
---@overload fun(savedState: CardInstance_SavedState): CardInstance
local CardInstance = {}

--
-- Each ge_tts instance should have a unique "instance type". Technically ge_tts
-- doesn't even use this info itself, however it's useful for *you*. The following
-- declaration is a convenience, whereby we expose that unique type on CardInstance
-- itself. You could easily use "Card" all through-out your code, but it's a good
-- idea to define constants.
--

CardInstance.INSTANCE_TYPE = "Card"

--
-- What follows is how we declare a ge_tts style subclass. As mentioned above
-- static_CardInstance inherits from ge_tts__static_Instance, so what
-- we're doing is copying the Instance metatable, and replace some fields.
-- Namely __call (our constructor), and __index, which we set to Instance,
-- and hence any fields not present on CardInstance will be looked for up
-- the "inheritance chain" on Instance.
--
-- NOTE: This metatable stuff only deals with the *static* CardInstance.
--

setmetatable(CardInstance, TableUtils.merge(getmetatable(Instance), {
    --- Here is on constructor, the type definition is a bit complicated, it's
    --- the combination of all three of our overloads!
    ---@param cardOrSavedState Card | CardInstance_SavedState
    ---@param nilOrObjectOrGuid nil | tts__Object | string
    ---@param nilOrContainer nil | tts__Container
    __call = function(_, cardOrSavedState, nilOrObjectOrGuid, nilOrContainer)
        -- Here we check whether we've been passed a saved state.
        local isSavedState = CardInstance.isSavedState(cardOrSavedState)

        --
        -- If we have, we pass that to our super constructor Instance(), otherwise
        -- we pass on the object GUID (guaranteed to not be nil at this point), and
        -- the container (which may be nil, if the card isn't in a container).
        --
        -- NOTE: We're casting from ge_tts__Instance to CardInstance, because
        --       we're about to add all the fields for a CardInstance onto it.
        --
        local self = --[[---@type CardInstance]] (
            isSavedState and Instance(--[[---@type CardInstance_SavedState]] cardOrSavedState)
                or Instance(--[[---@not nil]] nilOrObjectOrGuid, nilOrContainer)
        )

        -- Here we create a private variable belonging to this instance, it can't be
        -- accessed externally. It's storing the aforementioned card data, which is
        -- up to you.

        ---@type Card
        local card

        -- Seems as we want each type of instant to have its own type, we *must* implement a method
        -- called getInstanceType(). It takes no parameters, and returns the instance type.

        ---@return string
        function self.getInstanceType()
            return CardInstance.INSTANCE_TYPE
        end

        -- Next, we probably want to be able to get access to the card data associated with a card
        -- instance that's in play, so we expose that.

        ---@return Card
        function self.getCard()
            return card
        end

        -- Finally, we *override* save(). It's *very* important how we go about doing this. We must
        -- return our own data, but also return ge_tts__Instance. This is achieved by first grabbing
        -- a reference this existing save() method ge_tts__Instance...

        local superSave = self.save

        -- Then, we replace this method with our own implementation...

        ---@return CardInstance_SavedState
        function self.save()
            -- ge_tts__Instance (our super class) has its own data that it needs to save. So we call
            -- through to the original (super) save() method, and merge its result with our own data
            -- i.e. the card data (from our card library) associated with this instance.

            return --[[---@type CardInstance_SavedState]] TableUtils.merge(superSave(), {
                card = card,
            })
        end

        if isSavedState then
            -- If we're restoring from a saved state, we restore the card data from the saved state.

            local data = --[[---@type CardInstance_SavedState]] cardOrSavedState
            card = data.card
        else
            -- If not, then we know this constructor was called with the necessary card data, thus
            -- we cast it: --[[---@type Card]]
            card = --[[---@type Card]] cardOrSavedState
            -- Again, this cast business is just for the Luanalysis IDE, if you just want to use
            -- Atom and don't care about static typing your code, you can omit these comments.
        end

        return self
    end,

    -- As stated above, for convenience we make all methods provided by Instance available on
    -- CardInstance. Actually, you'l note we already took advantage of this fact in our
    -- constructor, where we used CardInstance.isSavedState instead of Instance.isSavedState.
    __index = Instance,
}))

-- We return our CardInstance, a callable static table.

return CardInstance
